import dotenv from 'dotenv'
import {
	Bot,
	Context,
	GrammyError,
	HttpError,
	Keyboard,
	InlineKeyboard,
} from 'grammy'
import { hydrate, HydrateFlavor } from '@grammyjs/hydrate'

const badWords = [
	'—Ö—É–π',
	'–∂–æ–ø–∞',
	'–ø–∏–∑–¥',
	'–µ–±–∞',
	'–º—É–¥–∏–ª',
	'–≥–∞–Ω–¥–æ–Ω',
	'–ø–∏–¥–æ—Ä',
	'–±–ª—è–¥',
	'—Å—É–∫–∞',
	'–Ω–∞—Ö—É–π',
	'–∑–∞–ª—É–ø',
	'—á–º–æ',
	'—É–µ–±',
	'–¥–æ–ª–±–æ',
	'–µ–±–ª–∞–Ω',
	'–µ–±–∞—Ç',
	'—Ö—É–µ—Å–æ—Å',
	'–ø–∏–¥—Ä',
	'–≥–æ–≤–Ω–æ',
	'–ø–µ–¥–µ—Ä–∞—Å—Ç',
	'–≤—ã–±–ª—è–¥–æ–∫',
	'–µ–±—É—á',
	'–ø–µ—Ä–¥—É–Ω',
	'—à–ª—é—Ö',
	'–±–ª—è',
]

const badWordsRegex = new RegExp(badWords.join('|'), 'i')

dotenv.config()

type BotContext = HydrateFlavor<Context>

const bot = new Bot<BotContext>(process.env.BOT_API_KEY as string)
bot.use(hydrate())

bot.api.setMyCommands([
	{
		command: 'start',
		description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞',
	},
	{
		command: 'say_anekdot',
		description: '–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –ø—Ä–æ –ü–æ–¥–æ–ª',
	},
	{
		command: 'menu',
		description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é',
	},
	{
		command: 'mood',
		description: '–°–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞',
	},
	{
		command: 'share',
		description: '–ß–µ–º-–Ω–∏–±—É–¥—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è',
	},
	{
		command: 'inline_keyboard',
		description: '–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
	},
])

// From slash without "/"
bot.command('start', async (ctx) => {
	await ctx.react('üí©')
	await ctx.reply(
		'–ó–¥–∞—Ä–æ–≤–∞ –ø–µ–¥–∏–∫. –Ø –±–æ—Ç —Ç–≥ –∫–∞–Ω–∞–ª–∞ <span class="tg-spoiler"><a href="https://t.me/lilbonekit_bot">lilbonekit\'s bot</a></span>',
		{
			parse_mode: 'HTML',
			reply_parameters: { message_id: ctx.msg.message_id },
		}
	)
})

const menuKeyboard = new InlineKeyboard()
	.text('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', 'order-status')
	.text('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 'support')

const backKeyboard = new InlineKeyboard().text('<= –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back')

bot.command('menu', async (ctx) => {
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
		reply_markup: menuKeyboard,
	})
})

bot.callbackQuery('order-status', async (ctx) => {
	await ctx.callbackQuery.message?.editText('–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏', {
		reply_markup: backKeyboard,
	})
	await ctx.answerCallbackQuery()
})

bot.callbackQuery('support', async (ctx) => {
	await ctx.callbackQuery.message?.editText('–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å', {
		reply_markup: backKeyboard,
	})
	await ctx.answerCallbackQuery()
})

bot.callbackQuery('back', async (ctx) => {
	await ctx.callbackQuery.message?.editText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
		reply_markup: menuKeyboard,
	})
	await ctx.answerCallbackQuery()
})

bot.command('inline_keyboard', async (ctx) => {
	const inlineKeyboard = new InlineKeyboard()
		.text('1', 'button-1')
		.row()
		.text('2', 'button-2')
		.row()
		.text('3', 'button-3')
		.row()

	const inlineKeyboard2 = new InlineKeyboard().url(
		'–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–≥ –∫ Lilbonekit',
		'https://t.me/lilbonekit'
	)

	await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', {
		reply_markup: inlineKeyboard2,
	})
})

// 	// await ctx.reply('–í—ã–±–µ—Ä–∏ —Ü–∏—Ñ—Ä—É', {
// 	// 	reply_markup: inlineKeyboard,
// 	// })
// })

// bot.callbackQuery(/button-[1-3]/, async (ctx) => {
// 	await ctx.answerCallbackQuery('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!!!')
// 	await ctx.reply(
// 		`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É: ${ctx.callbackQuery.data.replace(/\D/g, '')}`
// 	)
// })

// bot.on('callback_query:data', async (ctx) => {
// 	await ctx.answerCallbackQuery('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!!!')
// 	await ctx.reply(
// 		`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É ${ctx.callbackQuery.data.replace(/\D/g, '')}`
// 	)
// })

bot.command('share', async (ctx) => {
	const shareKeyboard = new Keyboard()
		.requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è')
		.requestContact('–ö–æ–Ω—Ç–∞–∫—Ç')
		.requestPoll('–û–ø—Ä–æ—Å')
		.resized()
		.placeholder('–¢—ã —Å–µ–π—á–∞—Å –±—É–¥–µ—à—å —á–µ–º-—Ç–æ –¥–µ–ª–∏—Ç—å—Å—è...')

	await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
		reply_markup: shareKeyboard,
	})
})

bot.on(':location', async (ctx) => {
	await ctx.reply('–°–ø–∞—Å–∏–±–æ, –¢–¶–ö –∑–∞–µ–¥—É—Ç –∫ —Ç–µ–±–µ —Å–∫–æ—Ä–æ')
})

bot.command('mood', async (ctx) => {
	const moodKeyBoard = new Keyboard()
		.text('–•–æ—Ä–æ—à–æ')
		.row()
		.text('–ù–æ—Ä–º')
		.row()
		.text('–•—É–µ–≤–æ')
		.resized()

	await ctx.reply('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
		reply_markup: moodKeyBoard,
	})
})

bot.hears('–•–æ—Ä–æ—à–æ', async (ctx) => {
	await ctx.reply(`–ù—É –∏ –ª–∞–¥–Ω–æ. –° ${ctx.from?.username} 200–≥—Ä–Ω`, {
		reply_markup: { remove_keyboard: true },
	})
})

bot.command(['say_anekdot', 'hello'], async (ctx) => {
	await ctx.reply(`
‚Äì –ó–Ω–∞–µ—à—å –∫–∞–∫ –≥–æ–≤–æ—Ä—è—Ç —É –Ω–∞—Å –Ω–∞ –ü–æ–¥–æ–ª–µ...
‚Äì –ù–µ –∑–Ω–∞—é. –Ø —Å –î–æ–Ω–±–∞—Å—Å–∞.
    `)
})

bot.hears('–ø–∏–Ω–≥', async (ctx) => {
	await ctx.reply('–ø–æ–Ω–≥')
})

bot.hears(badWordsRegex, async (ctx) => {
	await ctx.reply('–≠–π, –¥–∞–≤–∞–π –±–µ–∑ –º–∞—Ç–æ–≤ üò°')
})

// filters: message:text - any text message only
// filters: message:photo - any photo message only
// filters: message:voice - any voice message only
// filters: message:entities:url - message with url

// bot.on('msg').filter(
// 	(ctx) => {
// 		return ctx?.from?.id === 506807217
// 	},
// 	async (ctx) => {
// 		await ctx.reply('–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω')
// 	}
// )
bot.hears('ID', async (ctx) => {
	await ctx.reply(`–¢–≤–æ–π id: ${ctx.from?.id}`)
})

bot.on(':photo').on('::hashtag', async (ctx) => {
	await ctx.reply('–ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞ —Ö–µ—à—Ç–µ–≥ –∏ –µ—â–µ –∏ —Ñ–æ—Ç–æ')
})

bot.on('::bold', async (ctx) => {
	await ctx.reply('–ù–µ –Ω–∞–¥–æ –ø–æ–≤—ã—à–∞—Ç—å –Ω–∞ –º–µ–Ω—è —à—Ä–∏—Ñ—Ç')
})

bot.on(':entities:url', async (ctx) => {
	await ctx.reply('–ß—Ç–æ –≤ —Å—Å—ã–ª–∫–µ?')
})

bot.on(':voice', async (ctx) => {
	await ctx.reply('–Ø –Ω–µ —É–º–µ—é —Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ')
})

bot.on('message', async (ctx) => {
	console.log(ctx.msg)
	console.log(ctx.from)
	console.log(ctx.me)
	await ctx.reply(
		'–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...–ö–∞–∫ –Ω–∞—Å—á–µ—Ç 15800–≥—Ä–Ω –∏ –ø–æ–ª–æ–≤–∏–Ω—É –∫-–∫–∏ –∑–∞ —ç-–≥–∏—é –ø–æ–∫–∞ –Ω–µ –∑–º–Ω —ç-—Å—á–µ—Ç—á–∏–∫–∏'
	)
})

bot.catch((error) => {
	const ctx = error.ctx
	console.error(`Error while handling update: ${ctx.update.update_id}`)
	const e = error.error

	if (e instanceof GrammyError) {
		console.error('Error in request:', e.description)
		return
	}

	if (e instanceof HttpError) {
		console.error('Could not contact Telegram', e)
		return
	}

	console.error('Unknown error', e)
})

// Order matters:
// All event listeners and error handlers must be set up
// before starting the bot
bot.start()
